apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
// ------------- tasks
task stubSources(type: Jar) {
    classifier = 'sources'
}

task stubJavadoc(type: Jar) {
    classifier = 'javadoc'
}
task emptyJar(type: Jar) {
}

publishing {
    repositories {
        maven { url = 'https://dl.bintray.com/hazer/maven/' }
        mavenLocal()
    }
    publications.all {
        def type = it.name
//        println("Type is: $type")
//
//        logger.info("Type is: $type")
        switch (type) {
//            case 'kotlinMultiplatform':
//                task sourcesJar(type: Jar) {
//                    classifier 'sources'
//                    from kotlin.sourceSets.commonMain.kotlin
//                }
//
//                it.artifactId = "${project.name}-native"
//                it.artifact emptyJar
//                it.artifact stubJavadoc
//                it.artifact sourcesJar
//                break
//            case 'metadata':
//            case 'jvm':
            case 'android':
//            case 'js':
//            case 'ios':
//            case 'native':
                it.artifactId = "${project.name}-$type"
                break
        }

    }
//
////        pom.withXml { pom ->
////            def dependenciesNode = asNode().getAt("dependencies")[0]
////            if (dependenciesNode == null) return
////            dependenciesNode.dependency.each {
////                it.artifactId.each { node ->
////                    def artifactId = node.text()
////                    if (!artifactId.startsWith("dome") || !artifactId.endsWith("native")) return
////
////                    switch (type) {
////                        case 'metadata':
////                            node.setValue("${artifactId[0..-8]}")
////                            break
////                        case 'jvm':
////                        case 'android':
////                        case 'ios':
////                        case 'js':
////                            node.setValue("${artifactId[0..-8]}-$type")
////                            break
////                    }
////                }
////            }
////        }
//    }


//    kotlin.targets.all { target ->
//        def publication = publishing.publications.findByName(target.name)
//
//        if (publication != null) {
//            publication.artifact stubJavadoc
//
//            if (target.platformType.name != 'native') {
//                publication.moduleDescriptorGenerator = null
//            } else {
//                publication.artifact emptyJar
//            }
//        }
//    }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
def apiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
bintray {
    user bintrayUser
    key apiKey
    override = true // for multi-platform Kotlin/Native publishing
    pkg {
        repo = 'maven'
        name = 'DomeHTTP'
        publish = true
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}
// this is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal
// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('test') }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it
    }
}